[{"C:\\Users\\Max_o\\Reactivities\\client-app\\src\\index.tsx":"1","C:\\Users\\Max_o\\Reactivities\\client-app\\src\\reportWebVitals.ts":"2","C:\\Users\\Max_o\\Reactivities\\client-app\\src\\app\\layout\\App.tsx":"3","C:\\Users\\Max_o\\Reactivities\\client-app\\src\\app\\stores\\activityStore.ts":"4","C:\\Users\\Max_o\\Reactivities\\client-app\\src\\app\\layout\\LoadingComponent.tsx":"5","C:\\Users\\Max_o\\Reactivities\\client-app\\src\\features\\activities\\form\\ActivityForm.tsx":"6","C:\\Users\\Max_o\\Reactivities\\client-app\\src\\features\\nav\\NavBar.tsx":"7","C:\\Users\\Max_o\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityDashboard.tsx":"8","C:\\Users\\Max_o\\Reactivities\\client-app\\src\\features\\home\\HomePage.tsx":"9","C:\\Users\\Max_o\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetails.tsx":"10","C:\\Users\\Max_o\\Reactivities\\client-app\\src\\app\\api\\agent.ts":"11","C:\\Users\\Max_o\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityList.tsx":"12"},{"size":608,"mtime":1609215412706,"results":"13","hashOfConfig":"14"},{"size":425,"mtime":499162500000,"results":"15","hashOfConfig":"14"},{"size":1502,"mtime":1609301598406,"results":"16","hashOfConfig":"14"},{"size":4557,"mtime":1609300907310,"results":"17","hashOfConfig":"14"},{"size":326,"mtime":1609234112747,"results":"18","hashOfConfig":"14"},{"size":3354,"mtime":1609302435435,"results":"19","hashOfConfig":"14"},{"size":992,"mtime":1609230315251,"results":"20","hashOfConfig":"14"},{"size":754,"mtime":1609230249627,"results":"21","hashOfConfig":"14"},{"size":222,"mtime":1609230308286,"results":"22","hashOfConfig":"14"},{"size":1797,"mtime":1609291036792,"results":"23","hashOfConfig":"14"},{"size":1179,"mtime":1609145978501,"results":"24","hashOfConfig":"14"},{"size":1761,"mtime":1609230259147,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"i2mi0g",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"28"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"28"},"C:\\Users\\Max_o\\Reactivities\\client-app\\src\\index.tsx",[],["56","57"],"C:\\Users\\Max_o\\Reactivities\\client-app\\src\\reportWebVitals.ts",[],"C:\\Users\\Max_o\\Reactivities\\client-app\\src\\app\\layout\\App.tsx",[],"C:\\Users\\Max_o\\Reactivities\\client-app\\src\\app\\stores\\activityStore.ts",[],"C:\\Users\\Max_o\\Reactivities\\client-app\\src\\app\\layout\\LoadingComponent.tsx",[],"C:\\Users\\Max_o\\Reactivities\\client-app\\src\\features\\activities\\form\\ActivityForm.tsx",[],"C:\\Users\\Max_o\\Reactivities\\client-app\\src\\features\\nav\\NavBar.tsx",["58","59"],"import { observer } from \"mobx-react-lite\";\r\nimport React, { useContext } from \"react\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\nimport { Button, Container, Menu } from \"semantic-ui-react\";\r\nimport ActivityStore from \"../../app/stores/activityStore\";\r\n\r\nexport const NavBar: React.FC = () => {\r\n  const activityStore = useContext(ActivityStore);\r\n  return (\r\n    <Menu fixed=\"top\" inverted>\r\n      <Container>\r\n        <Menu.Item header as={NavLink} exact to='/' >\r\n          <img\r\n            src=\"/assets/logo.png\"\r\n            alt=\"logo\"\r\n            style={{ marginRight: \"10px\" }}\r\n          />\r\n          Reactivities\r\n        </Menu.Item>\r\n        <Menu.Item name=\"Activities\" as={NavLink} to='/activities' />\r\n        <Menu.Item>\r\n          <Button\r\n            as={NavLink} to='/createActivity'\r\n            positive\r\n            content=\"Create Activity\"\r\n          />\r\n        </Menu.Item>\r\n      </Container>\r\n    </Menu>\r\n  );\r\n};\r\n\r\nexport default observer(NavBar);\r\n","C:\\Users\\Max_o\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityDashboard.tsx",["60","61","62","63"],"import { observer } from \"mobx-react-lite\";\r\nimport React, { useContext } from \"react\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport ActivityDetails from \"../details/ActivityDetails\";\r\nimport { ActivityForm } from \"../form/ActivityForm\";\r\nimport ActivityList from \"./ActivityList\";\r\nimport ActivityStore from \"../../../app/stores/activityStore\";\r\n\r\nconst ActivityDashboard: React.FC = () => {\r\n  const activityStore = useContext(ActivityStore);\r\n  const { editMode, activity } = activityStore;\r\n  return (\r\n    <Grid>\r\n      <Grid.Column width={10}>\r\n        <ActivityList />\r\n      </Grid.Column>\r\n      <Grid.Column width={6}>\r\n        <h2>holders</h2>\r\n      </Grid.Column>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default observer(ActivityDashboard);\r\n","C:\\Users\\Max_o\\Reactivities\\client-app\\src\\features\\home\\HomePage.tsx",[],"C:\\Users\\Max_o\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetails.tsx",["64","65","66"],"import { observer } from \"mobx-react-lite\";\r\nimport React, { useContext, useEffect } from \"react\";\r\nimport { Link, RouteComponentProps } from \"react-router-dom\";\r\nimport { Button, Card, Image } from \"semantic-ui-react\";  \r\nimport { LoadingComponent } from \"../../../app/layout/LoadingComponent\";\r\nimport ActivityStore from \"../../../app/stores/activityStore\";\r\n\r\ninterface DetailParams {\r\n  id: string;\r\n}\r\n\r\nconst ActivityDetails: React.FC<RouteComponentProps<DetailParams>> = ({\r\n  match,\r\n  history\r\n}) => {\r\n  const activityStore = useContext(ActivityStore);\r\n  const {\r\n    activity,\r\n    openEditForm,\r\n    cancelSeletedActivity,\r\n    loadActivity,\r\n    loadingInitial,\r\n  } = activityStore;\r\n\r\n  useEffect(() => {\r\n    loadActivity(match.params.id);\r\n  }, [loadActivity]);\r\n\r\n  if (loadingInitial || !activity)\r\n    return <LoadingComponent content=\"Loading activity...\" />;\r\n\r\n  return (\r\n    <Card fluid>\r\n      <Image\r\n        src={`/assets/categoryImages/${activity!.category}.jpg`}\r\n        wrapped\r\n        ui={false}\r\n      />\r\n      <Card.Content>\r\n        <Card.Header>{activity!.title}</Card.Header>\r\n        <Card.Meta>\r\n          <span>{activity!.date}</span>\r\n        </Card.Meta>\r\n        <Card.Description>{activity!.description}</Card.Description>\r\n      </Card.Content>\r\n      <Card.Content extra>\r\n        <Button.Group width={2}>\r\n          <Button\r\n            as={Link} to={`/manage/${activity.id}`}\r\n            basic\r\n            color=\"blue\"\r\n            content=\"Edit\"\r\n          />\r\n          <Button\r\n            onClick={() => history.push('/activities')}\r\n            basic\r\n            color=\"grey\"\r\n            content=\"Cancel\"\r\n          />\r\n        </Button.Group>\r\n      </Card.Content>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default observer(ActivityDetails);\r\n","C:\\Users\\Max_o\\Reactivities\\client-app\\src\\app\\api\\agent.ts",["67"],"import axios, { AxiosResponse } from 'axios';\r\nimport { IActivity } from '../models/activity';\r\n\r\naxios.defaults.baseURL = 'http://localhost:5000/api';\r\n\r\nconst responseBody = (response: AxiosResponse) => response.data;\r\n\r\nconst sleep = (ms: number) => (response: AxiosResponse) =>\r\n    new Promise<AxiosResponse>(resolve => setTimeout(() => resolve(response), ms));\r\n\r\nconst requests = {\r\n    get: (url: string) => axios.get(url).then(sleep(1000)).then(responseBody),\r\n    post: (url: string, body: {}) => axios.post(url, body).then(sleep(1000)).then(responseBody),\r\n    put: (url: string, body: {}) => axios.put(url, body).then(sleep(1000)).then(responseBody),\r\n    del: (url: string) => axios.delete(url).then(sleep(1000)).then(responseBody)\r\n}\r\n\r\nconst Activities = {\r\n    list: (): Promise<IActivity[]> => requests.get('/activities'),\r\n    details: (id: string) => requests.get(`/activities/${id}`),\r\n    create: (activity: IActivity) => requests.post('/activities', activity),\r\n    update: (activity: IActivity) => requests.put(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.del(`/activities/${id}`)\r\n}\r\n\r\nexport default {\r\n    Activities\r\n}","C:\\Users\\Max_o\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityList.tsx",["68","69"],"import { observer } from \"mobx-react-lite\";\r\nimport React, { useContext } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Item, Label, Segment } from \"semantic-ui-react\";\r\nimport ActivityStore from \"../../../app/stores/activityStore\";\r\n\r\nconst ActivityList: React.FC = () => {\r\n  const activityStore = useContext(ActivityStore)\r\n  const{activitiesByDate, selectActivity, deleteActivity, submitting, target} = activityStore;\r\n  return (\r\n    <Segment clearing>\r\n      <Item.Group divided>\r\n        {activitiesByDate.map((activity) => (\r\n          <Item key={activity.id}>\r\n            <Item.Content>\r\n              <Item.Header as=\"a\">{activity.title}</Item.Header>\r\n              <Item.Meta>{activity.date}</Item.Meta>\r\n              <Item.Description>\r\n                <div>{activity.description}</div>\r\n                <div>\r\n                  {activity.city}, {activity.venue}\r\n                </div>\r\n              </Item.Description>\r\n              <Item.Extra>\r\n                <Button\r\n                  as={Link} to={'/activities/${activity.id}'}\r\n                  floated=\"right\"\r\n                  content=\"View\"\r\n                  color=\"blue\"\r\n                />\r\n                <Button\r\n                  name={activity.id}\r\n                  loading={target === activity.id && submitting}\r\n                  onClick={(e) => deleteActivity(e, activity.id)}\r\n                  floated=\"right\"\r\n                  content=\"Delete\"\r\n                  color=\"red\"\r\n                />\r\n                <Label basic content={activity.category} />\r\n              </Item.Extra>\r\n            </Item.Content>\r\n          </Item>\r\n        ))}\r\n      </Item.Group>\r\n    </Segment>\r\n  );\r\n};\r\n\r\nexport default observer(ActivityList);\r\n",{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","severity":1,"message":"75","line":3,"column":10,"nodeType":"76","messageId":"77","endLine":3,"endColumn":14},{"ruleId":"74","severity":1,"message":"78","line":8,"column":9,"nodeType":"76","messageId":"77","endLine":8,"endColumn":22},{"ruleId":"74","severity":1,"message":"79","line":4,"column":8,"nodeType":"76","messageId":"77","endLine":4,"endColumn":23},{"ruleId":"74","severity":1,"message":"80","line":5,"column":10,"nodeType":"76","messageId":"77","endLine":5,"endColumn":22},{"ruleId":"74","severity":1,"message":"81","line":11,"column":11,"nodeType":"76","messageId":"77","endLine":11,"endColumn":19},{"ruleId":"74","severity":1,"message":"82","line":11,"column":21,"nodeType":"76","messageId":"77","endLine":11,"endColumn":29},{"ruleId":"74","severity":1,"message":"83","line":19,"column":5,"nodeType":"76","messageId":"77","endLine":19,"endColumn":17},{"ruleId":"74","severity":1,"message":"84","line":20,"column":5,"nodeType":"76","messageId":"77","endLine":20,"endColumn":26},{"ruleId":"85","severity":1,"message":"86","line":27,"column":6,"nodeType":"87","endLine":27,"endColumn":20,"suggestions":"88"},{"ruleId":"89","severity":1,"message":"90","line":26,"column":1,"nodeType":"91","endLine":28,"endColumn":2},{"ruleId":"74","severity":1,"message":"92","line":9,"column":27,"nodeType":"76","messageId":"77","endLine":9,"endColumn":41},{"ruleId":"93","severity":1,"message":"94","line":26,"column":33,"nodeType":"95","messageId":"96","endLine":26,"endColumn":61},"no-native-reassign",["97"],"no-negated-in-lhs",["98"],"@typescript-eslint/no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'activityStore' is assigned a value but never used.","'ActivityDetails' is defined but never used.","'ActivityForm' is defined but never used.","'editMode' is assigned a value but never used.","'activity' is assigned a value but never used.","'openEditForm' is assigned a value but never used.","'cancelSeletedActivity' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'match.params.id'. Either include it or remove the dependency array.","ArrayExpression",["99"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'selectActivity' is assigned a value but never used.","no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","no-global-assign","no-unsafe-negation",{"desc":"100","fix":"101"},"Update the dependencies array to be: [loadActivity, match.params.id]",{"range":"102","text":"103"},[763,777],"[loadActivity, match.params.id]"]